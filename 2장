02장 설치와 설정
2.1 My SQL 서버 설치

My SQL 서버는 다음과 같이 다양한 형태로 설치할 수 있다. 허나, 리눅스의 RPM이나 운영체재 별 인스톨러를 이용하기를 권장한다. 

Tar 또는 Zip으로 압축된 버전
리눅스 RPM 설치 버전(윈도우 인스톨러 및 macOS 설치 패키지)
소스코드 빌드
2.1.1 버전과 에디션(엔터프라이즈와 커뮤니티) 선택

- 초기 버전의 My SQL 서버는 엔터프라이즈 에디션과 커뮤니티 에디션으로 나뉘어 있기는 했지만 실제 My SQL 서버의 기능에 차이가 있었던 것이 아니라 기술 지원의 차이만 있었다. 하지만 My SQL 5.5 버전부터는 커뮤티니와 엔터프라이즈 에디션의 기능이 달라지면서 소스코드도 달라졌고, My SQL엔터프라이즈 에디션의 소스코드는 더이상 공개되지 않는다.

 

- 핵심 기능은 차이가 없으며, 다음과 같은 부가적인 기능과 서비스들은 엔터프라이즈 에디션에서만 지원된다.

Thread Pool
Enterprise Audit
Enterprise TDE(Master Key 관리)
Enterprise Authentication
Enterprise Firewall
Enterprise Monitor
Enterprise Backup
My SQL 기술 지원
My SQL 엔터프라이즈 에디션과 커뮤니티 에디션의 기본성능이 다르다거나 한 것은 아니므로 엔터프라이즈 에디션에서 지원하는 것들이 꼭 필요한지 검토해보는 것이 좋다.

 

2.1.2 My SQL 설치

윈도우 버전 My SQL 서버를 설치하려면 설치에 필요한 윈도우 인스톨 프로그램을 직접 다운로드해야 한다.

My SQL 다운로드 페이지에서 운영체제의 버전을 선택하면 MSI 설치 프로그램을 다운로드할 수 있는 링크를 제공하며, 해당 링크를 클릭해 MSI 인스톨 프로그램을 다운로드하면 된다.

 

1. "Developer Default" 말고 꼭 필요한 소프트웨어만 선택하기 위해 "Custom"을 선택하고 다음으로 넘어간다.

2. My SQL shell, My SQL Router 만 선택하고 다음으로 넘어간다.

3. My SQL 서버의 고가용성 옵션을 선택할 수 있다. 복제 없이 단일 서버 실행모드인 'Standalone My SQL Server / Classic My SQL Replication' 옵션을 선택한다.

4. 지금 설치하는 My SQL 서버는 테스트용이므로 'Config Type'을 'Development Computer'로 선택한다. 다음 으로 넘어간다.

5. My SQL 서버 관리자 계정(root 계정)의 비밀번호를 입력한다. 

 

2.2 My SQL 서버의 시작과 종료

 

MySQL 서버에 로그인한 상태에서 SHUTDOWN 명령을 실행하면 된다. 

mysql> SHUTDOWN;
이렇게 원격으로 MySQL 서버를 셧다운 하려면 SHUTDOWN 권한을 가지고 있어야 한다.

 

2.2.3 서버 연결 테스트

mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
SHOW DATABASES 명령을 실행해 기본 생성된 데이터베이스의 목록을 확인할 수 있다.

 

2.3 My SQL 서버 업그레이드

My SQL 서버를 업그레이드 하는 방법으로 다음의 두 가지 방법을 생각해볼 수 있다.

 

1. My SQL 서버의 데이터 파일을 그대로 두고 업그레이드하는 방법

 '인플레이스 업그레이드(In-Place Upgrade)'라고 한다.
-여러 가지 제약 사항이 있지만 업그레이드 시간을 크게 단축할 수 있다.
2. mysqldump 도구 등을 이용해 My SQL 서버의 데이터를 SQL 문장이나 텍스트 파일로 덤프한 후, 새로 업그레이드된 버전의 My SQL 서버에서 덤프된 데이터를 적재하는 방법

 '논리적 업그레이드(Logical Upgrade)'라고 한다.
제약 사항이 거의 없지만 업그레이드 시간이 매우 많이 소요될 수 있다.
2.3.1 '인플레이스 업그레이드(In-Place Upgrade)' 제약 사항

 

1. 버전 호환성 문제

인플레이스 업그레이드를 진행하기 전에 현재 버전과 업그레이드할 버전 간의 호환성을 반드시 확인해야 한다.
2. 데이터 손실의 위험

인플레이스 업그레이드 도중 예기치 않은 오류가 발생하면 데이터 손실이 일어날 위험이 있다.
3. 성능 저하 가능성

업그레이드 후, 시스템 성능이 이전과 달라질 수 있습니다. 새 버전에서 변경된 설정이나 내부 알고리즘이 성능에 영향을 미칠 수 있기 때문에, 성능 테스트를 사전에 진행하고 업그레이드 후 벤치마킹을 통해 성능을 점검해야 합니다.
4. 호환되지 않는 기능

업그레이드 중에는 일부 기능이나 구성 요소가 호환되지 않거나 제거될 수 있다. 업그레이드 전, 새로운 버전에서 제거된 기능을 확인해야 한다.
5. 업그레이드 시간과 리소스 소비

업그레이드 과정에서 서비스 중단이 발생할 수 있으며, 이로 인해 가동 중지 시간이 길어질 수 있다. 또한, 업그레이드 과정에서 시스템 리소스(CPU, 메모리, 디스크 등)가 많이 소모될 수 있기 때문에, 시스템에 미치는 영향을 잘 관리해야 한다.
6. 소프트웨어 의존성

데이터베이스와 함께 사용하는 소프트웨어와의 호환성을 확인해야 한다. 새로운 버전으로 업그레이드했을 때 외부 시스템과의 의존성 문제로 서비스에 문제가 발생할 수 있다.
2.3.2 My SQL 8.0 업그레이드 시 고려 사항

 

1. 사용자 인증 방식 변경

Caching SHA-2 Authentication 인증 방식이 기본 인증 방식으로 바뀌었다. My SQL 5.7에 존재했던 사용자 계정은 여전히 Native Authentication 인증 방식을 사용하겠지만 My SQL 8.0 버전에서 별도의 옵션 없이 생성되는 사용자 계정은 Caching SHA-2 Authentication 인증 방식을 사용하게 될 것이다.
2. My SQL 8.0과의 호환성 체크

My SQL 8.0 업그레이드 전에 My SQL 5.7 버전에서 손상된 FRM 파일이나 호환되지 않는 데이터 타입 또는 함수가 있는지 mysqlcheck 유틸리티를 이용해 확인해 볼 것을 권장한다.
3. 외래어 이름의 길이

My SQL 8.0에서는 외래키의 이름이 64글자로 제한된다. 그래서 기존의 My SQL서버에서 외래키 이름이 64글자 이상인 것이 있는지 확인하고 필요하면 변경해야 한다.
4. 인덱스 힌트

My SQL 5.x에서 사용되던 인덱스 힌트가 있다면 My SQL 8.0에서 먼저 성능 테스트를 수행해야한다.
5. GROUP BY에 사용된 정렬 옵션

My SQL 5.x에서 GROUP BY 절의 칼럼 뒤에 'ASC'나 'DESC'를 사용하고 있따면 먼저 제거하거나 다른 방식으로 변경해야 한다.
6. 파티션을 위한 공용 테이블스페이스

My SQL 8.x에서는 파티션의 각 테이블스페이스를 공용 테이블스페이스에 저장할 수 없다. 그래서 파티션의 테이블스페이스가 공용 테이블스페이스에 저장된 것이 있는지 먼저 확인하고, 있다면 명령어를 실행해 개별 테이블스페이스를 사용하도록 변경해야 한다.
2.3.3 MySQL 8.0 업그레이드

 

이전 버전처럼 업그레이드 과정은 단순하지 않다. 5.7에서 8.0으로의 업그레이드는 크게 두 가지 단계로 나뉘어서 처리된다.

 

1. 데이터 딕셔너리 업그레이드

MySQL 8.0에서의 데이터 딕셔너리 업그레이드는 시스템의 성능, 무결성, 관리 용이성을 크게 향상시킨다. 업그레이드 시 자동으로 이루어지며, 기존 파일 기반 시스템에서 InnoDB 기반의 새로운 시스템으로 변환된다.
-과정-

1. MySQL 셧다운

2. MySQL 5.7 프로그램 삭제

3. MySQL 8.0  프로그램 설치

4. MySQL 8.0 서버 시작 ( MySQL 서버가 데이터 딕셔너리 업그레이드를 실행 후, 시스템 테이블 구조를 MySQL 8.0에 맞게 변환)

2. 서버 업그레이드 

MySQL 서버의 시스템 데이터베이스의 테이블 구조를 MySQL 8.0 버전에 맞게 변경한다.
-과정-

1. MySQL 셧다운

2. MySQL 5.7 프로그램 삭제

3. MySQL 8.0  프로그램 설치

4. MySQL 8.0 서버 시작

5. mysql_upgrade 프로그램 실행 ( mysql_upgrade 프로그램이 시스템 테이블의 구조를 MySQL 8.0에 맞게 변경)

 

2.4 서버 설정

 

일반적으로 MySQL 서버는 단 하나의 설정 파일을 사용하는데, 윈도우 계열에서는 MY.INI라는 이름을 사용한다. MySQL 서버는 지정된 여러 개의 디렉터리를 순차적으로 탐색하면서 처음 발견된 MY.CNF 파일을 사용하게 된다.

shell> mysqld --verbose --help

shell> mysql --help
 

'Default optons are read ...'라는 부분을 보면 MySQL 서버나 클라이언트 프로그램이 어디에 있는 my.ini 파일을 참조하는지 확인할 수 있다.

 

파일을 찾는 순서

1. /etc/my/cnf 파일

2. /etc/mysql/my.cnf 파일

3. /usr/etc/my/cnf 파일

4. ~/.my.cnf 파일

 

2.4.1 설정 파일의 구성

 

MySQL 설정 파일은 하나의 my.cnf나 my.ini 파일에 여러 개의 설정 그룹을 담을 수 있으며, 대체로 실행 프로그램 이름을 그룹명으로 사용한다. MySQL 서버 프로그램 포트는 3306, MySQL 클라이언트 프로그램 포트는 3304를 이용해 MySQL 서버에 접속하려고 한다. 즉, 설정 파일의 각 그룹은 같은 파일을 공유하지만 서로 무관하게 적용된다는 의미다.

 

2.4.2 MySQL 시스템 변수의 특징

 

MySQL  서버는 기동하면서 설정 파일의 내용을 읽어 메모리나 작동 방식을 초기화하고, 접속된 사용자를 제어하기 위해 이러한 값을 별도로 저장해 둔다. MySQL  서버에서는 이렇게 저장된 값을 시스템 변수라고 한다. 각 시스템 변수는 다음 예제와 같이 MySQL  서버에 접속해 SHOW VARIABLES 또는 SHOW GLOBAL VARIABLES라는 명령으로 확인할 수 있다.

mysql> SHOW GLOBAL VARIABLES;
시스템 변수(설정) 값이 어떻게 MySQL 서버와 클라이언트에 영향을 미치는지 판단하려면 각 변수가 글로벌 변수인지 세션 변수인지 구분할 수 있어야 한다.

 

   Cmd-line: MySQL 서버의 명령행 인자로 설정될 수 있는지 여부를 나타낸다. 즉, 이 값이 'YES'이면 명령행 인자로 이 시스템 변수의 값을 변경하는 것이 가능하다는 의미다.
   Option file: MySQL 의 설정 파일인 my.ini로 제어할 수 있는지 여부를 나타낸다. 옵션 파일, 설정 파일, 컨피규레이션 파일 등은 전부 my.ini 파일을 지칭하는 것으로 같은 의미로 사용된다.
   System Var: 시스템 변수인지 아닌지를 나타낸다. 뒤늦게 이런 부분을 언더스코어로 통일해가는 중이다. MySQL 8.0에서는 모든 시스템 변수들이 '_'를 구분자로 사용하도록 변경되었다. 명령행 옵션으로만 사용 가능한 설정은 '_'가 이나라 '-'을 구분자로 사용한다.
   Var Scope: 시스템 변수의 적용 범위를 나타낸다.
   Dynamic: 시스템 변수가 동적인지 정적인지 구분하는 변수이다.
2.4.3 글로벌 변수와 세션 변수

적용 범위에 따라 글로벌 변수와 세션 변수로 나뉜다. 일반적으로 세션별로 적용되는 시스템 변수의 경우 글로벌 변수뿐만 아니라 세션 변수에도 동시에 존재한다. 이러한 경우 MySQL 메뉴얼의 'Var Scope'에는 'Both'라고 표시된다.
글로벌 범위의 시스템 변수는 하나의 MySQL 서버 인스턴스에서 전체적으로 영향을 미치는 시스템 변수를 의미하며, 주로 MySQL 서버 자체에 관련된 설정일 때가 많다.
세션 범위의 시스템 변수는 MySQL 클라이언트가 MySQL 서버에 접속할 때 기본으로 부여하는 옵션의 기본값을 제어하는 데 사용된다. 다른 DBMS에서도 거의 비슷하겠지만 MySQL에서도 각 클라이언트가 처음에 접속하면 기본적으로 부여하는 기본값을 가지고 있다.
세션 범위의 시스템 변수 가운데 MySQL 서버으 ㅣ설정파일에 명시해 초기화할 수 있는 변수는 대부분 범위가 'Both'로 명시된 시스템 변수는 MySQL 서버가 기억만 하고 있다가 실제 클라이언트와의 커넥션이 생성되는 순간에 해당 커넥션의 기본값으로 사용되는 값이다. 그리고 순수하게 범위가 세션이라고 명시된 시스템 변수는 MySQL 서버의 설정 파일에 초깃값을 명시할 수 없으며, 커넥션이 만들어지는 순간부터 해당 커넥션에서만 유효한 설정 변수를 의미한다. 
2.4.4 정적 변수와 동적 변수

MySQL 서버의 시스템 변수는 MySQL 서버가 기동 중인 상태에서 변경 가능한지에 따라 동적 변수와 정적 변수로 구분된다. MySQL 서버의 시스템 변수는 디스크에 저장돼 있는 설정 파일을 변경하는 경우와 이미 기동 중인 MySQL 서버으 ㅣ메모리에 있는 MySQL 서버의 시스템 변수를 변경하는 경우로 구분할 수 있다.
mysql> SHOW GLOBAL VARIABLES LIKE '%max_connections%';
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
| max_connections        | 151   |
| mysqlx_max_connections | 100   |
+------------------------+-------+
2 rows in set, 1 warning (0.01 sec)

mysql> SET GLOBAL max_connections=500;
Query OK, 0 rows affected (0.00 sec)

mysql> SHOW GLOBAL VARIABLES LIKE '%max_connections%';
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
| max_connections        | 500   |
| mysqlx_max_connections | 100   |
+------------------------+-------+
2 rows in set, 1 warning (0.00 sec)
 

시스템 변수의 범위가 'Both'인 경우에는 글로벌 시스템 변수의 값을 변경해도 이미 존재하는 커넥션의 세션 변숫값은 변경되지 않고 그대로 유지된다. 동적으로 변경 가능한 join_buffer_size라는 Both 타입 변수로 확인 가능하다.
mysql> SHOW GLOBAL VARIABLES LIKE 'join_buffer_size';
+------------------+--------+
| Variable_name    | Value  |
+------------------+--------+
| join_buffer_size | 262144 |
+------------------+--------+
1 row in set, 1 warning (0.00 sec)

mysql> sHOW VARIABLES LIKE 'join_buffer_size';
+------------------+--------+
| Variable_name    | Value  |
+------------------+--------+
| join_buffer_size | 262144 |
+------------------+--------+
1 row in set, 1 warning (0.00 sec)

mysql> SET GLOBAL join_buffer_size=524288;
Query OK, 0 rows affected (0.00 sec)

mysql> SHOW GLOBAL VARIABLES LIKE 'join_buffer_size';
+------------------+--------+
| Variable_name    | Value  |
+------------------+--------+
| join_buffer_size | 524288 |
+------------------+--------+
1 row in set, 1 warning (0.00 sec)

mysql> SHOW VARIABLES LIKE 'join_buffer_size';
+------------------+--------+
| Variable_name    | Value  |
+------------------+--------+
| join_buffer_size | 262144 |
+------------------+--------+
1 row in set, 1 warning (0.00 sec)
 

MySQL의 시스템 변수 가운데 동적인 변수만 이렇게 SET 명령을 이용해 변경하는 것이 가능하다. SET 명령으로 새로운 값을 설정할 때는 설정 파일에서처럼 MB나 GB와 같이 단위 표기법을 사용할 수 없지만 수식은 사용할 수 있다.
2.4.5 SET PERSIST

동적 변수의 경우 MySQL 서버에서 SET GLOBAL 명령으로 변경하면 즉시 MySQL 서버에 반영된다.
mysql> SET GLOBAL max_connections=5000;
Query OK, 0 rows affected (0.00 sec)
이렇게 변경한 후 설정 파일에 이 내용을 적용하지 않고, MySQL 서버를 재시작하면 다시 예전의 max_connections 시스템 변수의 값으로 MySQL 서버가 시작되고, 이로 인해 장애가 반복적으로 발생한다. 이를 해결하기 위해 SET PERSIST 명령을 도입했다.
mysql> SHOW GLOBAL VARIABLES LIKE 'max_connections';
+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| max_connections | 5000  |
+-----------------+-------+
1 row in set, 1 warning (0.00 sec)

깃허브 리드미에 올릴건데 정리해줘
